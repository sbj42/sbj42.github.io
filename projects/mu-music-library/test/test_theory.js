(function() {
    console.info('testing mu.Frequency');
    var a4 = mu.Frequency(440);
    assertEquals(a4.hertz(), 440);
    assertEquals(a4.toString(), '440.0 Hz');
    assertEquals(a4.multiply(2).hertz(), 880);
    assertEquals(a4.multiply(4).toString(), '1,760 Hz');
    var c2 = mu.Frequency(65.406);
    assertEquals(c2.hertz(), 65.406);
    assertEquals(c2.toString(), '65.41 Hz');
    assertThrow(function() { mu.Frequency(-1); });
    assertThrow(function() { mu.Frequency(0); });
    assertThrow(function() { mu.Frequency(1/0); });
    assertThrow(function() { mu.Frequency('x'); });
    assertThrow(function() { mu.Frequency('1'); });
})();

(function() {
    console.info('testing mu.Tempo');
    var t = mu.Tempo(120);
    assertEquals(t.bpm(), 120);
    assertEquals(t.toString(), '120 bpm');
    var t2 = mu.Tempo(56.59);
    assertClose(t2.bpm(), 56.59, 0.01);
    assertEquals(t2.toString(), '56.6 bpm');
    assertThrow(function() { mu.Tempo(-1); });
    assertThrow(function() { mu.Tempo(0); });
    assertThrow(function() { mu.Tempo(1/0); });
    assertThrow(function() { mu.Tempo('x'); });
    assertThrow(function() { mu.Tempo('1'); });
})();

(function() {
    console.info('testing mu.Accidental');
    var s = mu.Accidental(1);
    assertEquals(s.semitones(), 1);
    assertEquals(s.toString(), '\u266f');
    var f = mu.FLAT;
    assertEquals(f.semitones(), -1);
    assertEquals(f.toString(), '\u266d');
    assert(s.equals(s));
    assert(!f.equals(s));
    assertThrow(function() { mu.Accidental(100); });
    assertThrow(function() { mu.Accidental(1/0); });
    assertThrow(function() { mu.Accidental('x'); });
    assertThrow(function() { mu.Accidental('1'); });
})();

(function() {
    console.info('testing mu.PitchClass');
    var A = mu.A;
    assertEquals(A.index(), 9);
    assertEquals(A.toString(), 'A');
    assertEquals(A.transpose(1).toString(), 'A\u266F/B\u266D');
    assertEquals(A.transpose(-1).toString(), 'G\u266F/A\u266D');
    assertEquals(A.transpose(3).toString(), 'C');
    assertEquals(A.transpose(-5).toString(), 'E');
    var C = mu.PitchClass(0);
    assertEquals(C.index(), 0);
    assertEquals(C.toString(), 'C');
    assertEquals(C.toString(mu.A_MINOR), 'C');
    assertEquals(mu.F.toString(mu.D_MAJOR), 'E\u266F/F\u266E');
    assertEquals(mu.F_SHARP.toString(mu.D_MAJOR), 'F\u266F');
    assertEquals(mu.F_SHARP.toString(mu.D_MINOR), 'F\u266F/G\u266D');
    assertEquals(C.interval(A).semitones(), 3);
    assertEquals(A.interval(C).semitones(), 3);
    assert(!C.equals(A));
    assert(C.equals(C));
    assertThrow(function() { mu.C.transpose('1'); });
    assertThrow(function() { mu.PitchClass(-1); });
    assertThrow(function() { mu.PitchClass(12); });
    assertThrow(function() { mu.PitchClass('0'); });
    assertThrow(function() { mu.PitchClass(0.5); });
})();

(function() {
    console.info('testing mu.Pitch');
    var A4 = mu.A_4;
    assertEquals(A4.octave(), 4);
    assertEquals(A4.pitchClass().index(), 9);
    assertEquals(A4.frequency().hertz(), 440);
    assertEquals(A4.toString(), 'A4');
    assertEquals(A4.transpose(1).toString(), 'A\u266F4/B\u266D4');
    assertEquals(A4.transpose(-1).toString(), 'G\u266F4/A\u266D4');
    assertEquals(A4.transpose(3).toString(), 'C5');
    assertEquals(A4.transpose(-5).toString(), 'E4');
    assert(mu.Pitch.fromNum(A4.toNum()).equals(A4));
    var C2 = mu.Pitch(mu.C, 2);
    assertEquals(C2.octave(), 2);
    assertEquals(C2.pitchClass().index(), 0);
    assertEquals(A4.subtract(C2), 33);
    assert(!C2.equals(A4));
    assert(C2.equals(C2));
    assertClose(C2.frequency().hertz(), 65.406, 0.001);
    assertEquals(C2.toString(), 'C2');
    assert(mu.Pitch.fromFrequency(mu.Frequency(440)).equals(mu.A_4));
    assert(mu.Pitch.fromFrequency(mu.Frequency(330)).equals(mu.E_4));
    assert(mu.Pitch.fromFrequency(mu.Frequency(340)).equals(mu.F_4));
    assertEquals(C2.toString(mu.A_MINOR), 'C2');
    assertEquals(mu.F_3.toString(mu.D_MAJOR), 'E\u266F3/F\u266E3');
    assertEquals(mu.F_SHARP_3.toString(mu.D_MAJOR), 'F\u266F3');
    assertEquals(mu.F_SHARP_3.toString(mu.D_MINOR), 'F\u266F3/G\u266D3');
    assertEquals(mu.C_3.toString(mu.B_MAJOR), 'B\u266F2/C\u266E3');
    assertEquals(mu.C_0.toString(mu.A_MAJOR), 'B\u266F-1/C\u266E0');
    assertThrow(function() { mu.C_0.transpose(-1); });
    assertThrow(function() { mu.B_10.transpose(1); });
    assertThrow(function() { mu.C_0.transpose('1'); });
    assertThrow(function() { mu.Pitch(mu.C, -1); });
    assertThrow(function() { mu.Pitch(-1, 0); });
    assertThrow(function() { mu.Pitch(12, 0); });
    assertThrow(function() { mu.Pitch(mu.C, 11); });
    assertThrow(function() { mu.Pitch('0', 0); });
    assertThrow(function() { mu.Pitch(mu.C, '0'); });
    assertThrow(function() { mu.Pitch(0.5, 0); });
    assertThrow(function() { mu.Pitch(mu.C, 0.5); });
})();

(function() {
    console.info('testing mu.Interval');
    var i1 = mu.Interval(1);
    assertEquals(i1.semitones(), 1);
    assertEquals(i1.toString(), '1 semitone');
    assertEquals(i1.name(), 'minor second');
    var i5 = mu.Interval(mu.C_4, mu.F_4);
    assertEquals(i5.semitones(), 5);
    assertEquals(i5.toString(), '5 semitones');
    assertEquals(i5.name(), 'perfect fourth');
    assertEquals(mu.C_4.interval(mu.D_4).semitones(), 2);
    assertEquals(mu.B_2.interval(mu.C_2).semitones(), 11);
    assertEquals(mu.B_2.sharper(mu.Interval(3)).toString(), 'D3');
    assertEquals(mu.B_2.flatter(mu.Interval(4)).toString(), 'G2');
    assertThrow(function() { mu.Interval(1.5); });
    assertThrow(function() { mu.Interval(-2); });
    assertThrow(function() { mu.Interval(10000); });
    assertThrow(function() { mu.Interval('1'); });
})();

(function() {
    console.info('testing mu.Chord');
    var CM = mu.Chord(mu.C_4, mu.E_4, mu.G_4);
    assertEquals(CM.size(), 3);
    assertEquals(CM.pitches()[0].toString(), 'C4');
    assertEquals(CM.pitches()[1].toString(), 'E4');
    assertEquals(CM.pitches()[2].toString(), 'G4');
    assertEquals(CM.toString(), 'C4 E4 G4');
    assertEquals(CM.analyze().length, 1);
    assertEquals(CM.name(), 'C major');
    assertEquals(CM.abbr(), 'CM');
    var Cm = mu.Chord([mu.C_4, mu.G_4, mu.D_SHARP_4]);
    assertEquals(Cm.size(), 3);
    assertEquals(Cm.pitches()[0].toString(), 'C4');
    assertEquals(Cm.pitches()[1].toString(), 'D\u266F4/E\u266D4');
    assertEquals(Cm.pitches()[2].toString(), 'G4');
    assertEquals(Cm.toString(), 'C4 D\u266F4/E\u266D4 G4');
    assertEquals(Cm.analyze().length, 1);
    assertEquals(Cm.name(), 'C minor');
    assertEquals(Cm.abbr(), 'Cm');
    var FM = CM.transpose(5);
    assertEquals(FM.size(), 3);
    assertEquals(FM.pitches()[0].toString(), 'F4');
    assertEquals(FM.pitches()[1].toString(), 'A4');
    assertEquals(FM.pitches()[2].toString(), 'C5');
    assertEquals(FM.toString(), 'F4 A4 C5');
    assertEquals(FM.analyze().length, 1);
    assertEquals(FM.name(), 'F major');
    var C5 = mu.Chord(mu.C_4, mu.G_4);
    assertEquals(C5.size(), 2);
    assertEquals(C5.analyze().length, 1);
    assertEquals(C5.name(), 'C fifth');
    var z = mu.Chord();
    assertEquals(z.toString(), '');
    assertEquals(z.size(), 0);
    assertEquals(z.name(), null);
    assertThrow(function() { mu.Chord('C4 G4'); });
})();

(function() {
    console.info('testing mu.Mode');
    var M = mu.MAJOR;
    assertEquals(M.toString(), 'Ionian');
    assertEquals(M.degree(1).semitones(), 0);
    assertEquals(M.degree(2).semitones(), 2);
    assertEquals(M.degree(3).semitones(), 4);
    var m = mu.MINOR;
    assertEquals(m.toString(), 'Aeolian');
    assertEquals(m.degree(1).semitones(), 0);
    assertEquals(m.degree(2).semitones(), 2);
    assertEquals(m.degree(3).semitones(), 3);
    assert(M.equals(M));
    assert(!m.equals(M));
})();

(function() {
    console.info('testing mu.NoteName');
    var C = mu.NoteName(mu.C);
    assertEquals(C.toString(), 'C');
    assert(C.base().equals(mu.C));
    assertEquals(C.accidental(), null);
    assert(C.pitchClass().equals(mu.C));
    var Cn = mu.NoteName(mu.C, mu.NATURAL);
    assertEquals(Cn.toString(), 'C\u266e');
    assert(Cn.base().equals(mu.C));
    assert(Cn.accidental().equals(mu.NATURAL));
    assert(Cn.pitchClass().equals(mu.C));
    var Bs = mu.NoteName(mu.B, mu.SHARP);
    assertEquals(Bs.toString(), 'B\u266f');
    assert(Bs.base().equals(mu.B));
    assert(Bs.accidental().equals(mu.SHARP));
    assert(Bs.pitchClass().equals(mu.C));
    assert(C.equals(C));
    assert(!C.equals(Cn));
    assert(!Bs.equals(C));
})();

(function() {
    console.info('testing mu.Key');
    var CM = mu.C_MAJOR;
    assertEquals(CM.toString(), 'C Major');
    assert(CM.tonic().equals(mu.NoteName(mu.C)));
    assert(CM.degreePitchClass(1).equals(mu.C));
    assert(CM.degreePitchClass(2).equals(mu.D));
    assert(CM.degreePitchClass(3).equals(mu.E));
    assert(CM.degreeName(3).equals(mu.NoteName(mu.E)));
    assert(CM.degreePitchClass(2, mu.SHARP).equals(mu.D_SHARP));
    assert(CM.degreePitchClass(2, mu.DOUBLE_SHARP).equals(mu.E));
    assertEquals(CM.pitchClassDegree(mu.G), 5);
    assertEquals(CM.pitchClassDegree(mu.G_SHARP), null);
    var Fm = mu.F_MINOR;
    assertEquals(Fm.toString(), 'F Minor');
    assert(Fm.tonic().equals(mu.NoteName(mu.F)));
    assert(Fm.degreePitchClass(1).equals(mu.F));
    assert(Fm.degreePitchClass(2).equals(mu.G));
    assert(Fm.degreePitchClass(3).equals(mu.A_FLAT));
    assert(Fm.degreeName(3).equals(mu.NoteName(mu.A, mu.FLAT)));
    assert(Fm.degreePitchClass(3, mu.FLAT).equals(mu.A_FLAT));
    assert(Fm.degreePitchClass(3, mu.NATURAL).equals(mu.A));
    assertEquals(Fm.pitchClassDegree(mu.E_FLAT), 7);
    assertEquals(Fm.pitchClassDegree(mu.E), null);
    assert(mu.C_FLAT_MAJOR.tonic().equals(mu.NoteName(mu.C, mu.FLAT)));
    assert(mu.B_SHARP_MAJOR.tonic().equals(mu.NoteName(mu.B, mu.SHARP)));
    assert(mu.G_SHARP_MAJOR.degreeName(7).equals(mu.NoteName(mu.F, mu.DOUBLE_SHARP)));
})();

document.write('tests passed');
